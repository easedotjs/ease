{
  "version": 3,
  "sources": ["index.js"],
  "sourcesContent": ["if (typeof ease === 'undefined') {\n  throw new Error('This library requires Ease to be loaded first')\n}\nease.extensions.before(['@easedotjs/components'])\n\nconst { error } = ease.log;\nconst { live } = ease;\n\n// Get the live method from the reactive extension\nlet evals = [];\n\nfunction markNodesReactive(node) {\n  const { EaseTextNode } = ease.extensions.get('@easedotjs/components').vdom;\n  switch (node.constructor.name) {\n    case 'EaseTextNode':\n      const regex = /(\\{\\{.*?\\}\\})/g;\n      const result = node.text.split(regex).filter(Boolean);\n      const newChildren = [];\n      result.forEach((text) => {\n        if (text.startsWith('{{') && text.endsWith('}}')) {\n          const dynamic = new EaseTextNode(text.substring(2, text.length - 2));\n          dynamic.addMeta('reactive', true);\n          newChildren.push(dynamic);\n        } else {\n          newChildren.push(new EaseTextNode(text));\n        }\n      });\n      node.replace(...newChildren);\n      break;\n    case 'EaseNode':\n      node.children.forEach(markNodesReactive);\n      break;\n  }\n}\n\n/**\n * Parses a template string and converts all {{}} to <reactive-text></reactive-text>\n * @param {string} The text content of a <template> tag \n * @returns A string with the text wrapped in <reactive-text></reactive-text>\n */\nfunction onFetchComponent({template}) {\n  template.children.forEach(markNodesReactive);  \n}\n\nfunction makeReactive(node, rx) {\n  if (node.getMeta('reactive')) {\n    const key = node.text.trim();\n    rx[key] = live();\n    rx[key].subscribe((value) => {\n      node.text = value.value;\n      node.htmlNode.textContent = value.value;\n    });\n  }\n  node.children.forEach((node) => makeReactive(node, rx));\n}\n\n/**\n * When a component is initialized, this method is called to convert all reactive-text elements to reactive values\n * @param {object} An object containing the shadow root and args \n */\nfunction onInit({instance, args}) {\n  args.rx = args.rx || {};\n\n  instance.vdom.children.forEach((node) => makeReactive(node, args.rx));\n}\n\n/**\n * Cleans up reactive values when a component is removed\n */\nfunction onCleanup({args}) {\n  if (args.rx) {\n    Object.keys(args.rx).forEach((key) => {\n      args.rx[key].unsubscribe();\n    })\n  } \n  evals = [];\n}\n\nease.extensions.add({\n  name: '@easedotjs/reactive-dom',\n  ['@easedotjs/components']: { \n    onFetchComponent,\n    onInit,\n    onCleanup\n  }\n});"],
  "mappings": "MAAA,GAAI,OAAO,KAAS,IAClB,MAAM,IAAI,MAAM,+CAA+C,EAEjE,KAAK,WAAW,OAAO,CAAC,uBAAuB,CAAC,EAEhD,GAAM,CAAE,MAAAA,CAAM,EAAI,KAAK,IACjB,CAAE,KAAAC,CAAK,EAAI,KAGbC,EAAQ,CAAC,EAEb,SAASC,EAAkBC,EAAM,CAC/B,GAAM,CAAE,aAAAC,CAAa,EAAI,KAAK,WAAW,IAAI,uBAAuB,EAAE,KACtE,OAAQD,EAAK,YAAY,KAAM,CAC7B,IAAK,eACH,IAAME,EAAQ,iBACRC,EAASH,EAAK,KAAK,MAAME,CAAK,EAAE,OAAO,OAAO,EAC9CE,EAAc,CAAC,EACrBD,EAAO,QAASE,GAAS,CACvB,GAAIA,EAAK,WAAW,IAAI,GAAKA,EAAK,SAAS,IAAI,EAAG,CAChD,IAAMC,EAAU,IAAIL,EAAaI,EAAK,UAAU,EAAGA,EAAK,OAAS,CAAC,CAAC,EACnEC,EAAQ,QAAQ,WAAY,EAAI,EAChCF,EAAY,KAAKE,CAAO,CAC1B,MACEF,EAAY,KAAK,IAAIH,EAAaI,CAAI,CAAC,CAE3C,CAAC,EACDL,EAAK,QAAQ,GAAGI,CAAW,EAC3B,MACF,IAAK,WACHJ,EAAK,SAAS,QAAQD,CAAiB,EACvC,KACJ,CACF,CAOA,SAASQ,EAAiB,CAAC,SAAAC,CAAQ,EAAG,CACpCA,EAAS,SAAS,QAAQT,CAAiB,CAC7C,CAEA,SAASU,EAAaT,EAAMU,EAAI,CAC9B,GAAIV,EAAK,QAAQ,UAAU,EAAG,CAC5B,IAAMW,EAAMX,EAAK,KAAK,KAAK,EAC3BU,EAAGC,CAAG,EAAId,EAAK,EACfa,EAAGC,CAAG,EAAE,UAAWC,GAAU,CAC3BZ,EAAK,KAAOY,EAAM,MAClBZ,EAAK,SAAS,YAAcY,EAAM,KACpC,CAAC,CACH,CACAZ,EAAK,SAAS,QAASA,GAASS,EAAaT,EAAMU,CAAE,CAAC,CACxD,CAMA,SAASG,EAAO,CAAC,SAAAC,EAAU,KAAAC,CAAI,EAAG,CAChCA,EAAK,GAAKA,EAAK,IAAM,CAAC,EAEtBD,EAAS,KAAK,SAAS,QAASd,GAASS,EAAaT,EAAMe,EAAK,EAAE,CAAC,CACtE,CAKA,SAASC,EAAU,CAAC,KAAAD,CAAI,EAAG,CACrBA,EAAK,IACP,OAAO,KAAKA,EAAK,EAAE,EAAE,QAASJ,GAAQ,CACpCI,EAAK,GAAGJ,CAAG,EAAE,YAAY,CAC3B,CAAC,EAEHb,EAAQ,CAAC,CACX,CAEA,KAAK,WAAW,IAAI,CAClB,KAAM,0BACL,wBAA0B,CACzB,iBAAAS,EACA,OAAAM,EACA,UAAAG,CACF,CACF,CAAC",
  "names": ["error", "live", "evals", "markNodesReactive", "node", "EaseTextNode", "regex", "result", "newChildren", "text", "dynamic", "onFetchComponent", "template", "makeReactive", "rx", "key", "value", "onInit", "instance", "args", "onCleanup"]
}
