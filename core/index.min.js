(()=>{var h=Object.defineProperty;var E=(e,o)=>{for(var t in o)h(e,t,{get:o[t],enumerable:!0})};var a={};E(a,{error:()=>c,info:()=>d,log:()=>b,warn:()=>v});function c(...e){n.core?.debug&&(console.group("[Error] Ease:"),console.error(...e),console.groupEnd())}function v(...e){n.core?.debug&&(console.group("[Warn] Ease:"),console.warn(...e),console.groupEnd())}function b(...e){n.core?.debug&&(console.group("[Log] Ease:"),console.log(...e),console.groupEnd())}function d(...e){!n.core?.debug||n.core.debug!=="verbose"||(console.group("Ease:"),console.info(...e),console.groupEnd())}var r=new EventTarget,f=[],p=class extends CustomEvent{constructor(o,t){super(`event-bridge--${o}`,{detail:{data:t}})}},s=class extends CustomEvent{constructor(o,t){let i=t?`event-bridge-fetch-response--${o}`:`event-bridge-fetch-request--${o}`;super(i,{detail:{response:t}})}};function x(e,o){r.dispatchEvent(new p(e,o))}function g(e,o){return r.addEventListener(`event-bridge--${e}`,t=>{o?.(t.detail.data)}),{off:()=>r.removeEventListener("ease-event-bridge",o)}}function m(e,o){return f.push(e),r.addEventListener(`event-bridge-fetch-response--${e}`,t=>{typeof o=="function"?r.dispatchEvent(new s(e,o)):typeof o=="boolean"?r.dispatchEvent(new s(e,!0)):typeof o>"u"?c("onFetch requires a response object or callback method, but none was provided."):r.dispatchEvent(new s(e,o))}),{off:()=>{f=f.filter(t=>t!==e),r.removeEventListener("ease-event-bridge-fetch",callback)}}}function w(e,o){return g(e,t=>{handler.off(),o(t)})}function $(e){return new Promise((o,t)=>{f.includes(e)||(c(`No fetch handler found for '${e}'`),t()),r.addEventListener(`event-bridge-fetch-response--${e}`,i=>{o(i.detail.response)}),r.dispatchEvent(new s(e))})}globalThis.EventBridge={send:x,on:g,onFetch:m,once:w,fetch:$};var n={core:{debug:!1},inject:{name:"$",extensions:[]}};document.querySelectorAll("meta")?.forEach(e=>{if(e.name.startsWith("ease.")){let o=e.name.replace("ease.","").split("."),t=o.pop(),i=o.reduce((u,l)=>(u[l]===void 0&&(u[l]={}),u[l]),n);i[t]=e.content}});function L(e){let o=e.name||e.constructor.name;n.inject.extensions.push(e),d(`Extension '${o}' has been added to Ease`)}n.core.debug&&d("Ease Loaded in Debug Mode");globalThis.ease={config:n,addExtension:L,log:a};})();
//# sourceMappingURL=index.min.js.map
