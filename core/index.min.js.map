{
  "version": 3,
  "sources": ["log.js", "index.js"],
  "sourcesContent": ["import { config } from './index.js'\n\nexport function error(...data) {\n  if (config.core?.debug === 'silent') return\n  console.group(`[Error] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.error(v))\n  console.groupEnd();\n}\n\nexport function warn(...data) {\n  if (!config.core?.debug) return\n  console.group(`[Warn] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.warn(v))\n  console.groupEnd();\n}\n\nexport function log(...data) {\n  if (!config.core?.debug) return\n  console.group(`[Log] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.log(v))\n  console.groupEnd();\n}\n\nexport function info(...data) {\n  if (!config.core?.debug || config.core.debug !== 'verbose') return\n  console.group(`[Info] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.info(v))\n  console.groupEnd();\n}\n", "/** Ease */\nimport * as log from './log.js'\n\n/* Core Config */\nexport let config = {\n  core: {\n    debug: false, // Enables debug mode; prints errors to console\n  },\n  inject: { // Handles injected extensions\n    name: '$',\n    extensions: []\n  }\n}\n\n/* Parse meta tags for configs */\ndocument.querySelectorAll('meta')?.forEach((meta) => {\n  if (meta.name.startsWith('ease.')) {\n    let path = meta.name.replace('ease.', '').split('.')\n    let key = path.pop()    \n\n    let target = path.reduce((acc,key) => {\n      if (acc[key] === undefined) acc[key] = {}\n      return acc[key]\n    }, config)\n\n    target[key] = meta.content\n  }\n})\n\n/**\n * Adds an extension, which adds functionality to Ease components.\n * \n * Extensions should be objects containing:\n * - name: The name of the extension\n * - methods: An object containing methods to be added to Ease\n * - objects: An object containing properties to be added to Ease\n * \n * While Ease Core does not use extensions, they can be used to add functionality\n * to modules that use Ease.\n * \n * @param {*} object The object to be injected\n */\nexport function addExtension(object) {\n  let name = object.name || object.constructor.name\n  config.inject.extensions.push(object)\n  log.info(`Extension '${name}' has been added to Ease`)\n}\n\nexport function getExtension(name) {\n  return config.inject.extensions.find((extension) => extension.name === name)\n}\n\nexport function hasExtension(name) {\n  if (typeof name === 'string') return !!getExtension(name)\n  if (typeof name === 'array') return name.every((n) => !!getExtension(n))\n  return false\n}\n\nexport function requireExtensions(names) {\n  if (typeof names === 'string') names = [names]\n  names.forEach((name) => {\n    if (!hasExtension(name)) throw new Error(`Extension '${name}' is required but not loaded`)\n  })\n  return true\n}\n\nexport function beforeExtensions(names) {\n  if (typeof names === 'string') names = [names]\n  names.forEach((name) => {\n    if (getExtension(name)) {\n      console.error(`Extension '${name}' is already loaded - this extension should be loaded before it`)\n    }\n  })\n}\n\n/* Print to the console if debug mode is enabled */\nif (config.core.debug) log.info('Ease Loaded in Debug Mode');\n\n/* Export Ease */\nglobalThis.ease = { config, log, extensions: {\n  add: addExtension,\n  get: getExtension,\n  has: hasExtension,\n  require: requireExtensions,\n  before: beforeExtensions,\n  all: config.inject.extensions,\n}}"],
  "mappings": "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",
  "names": ["log_exports", "__export", "error", "info", "log", "warn", "error", "data", "config", "v", "warn", "log", "info", "config", "meta", "path", "key", "target", "acc", "addExtension", "object", "name", "info", "getExtension", "extension", "hasExtension", "n", "requireExtensions", "names", "beforeExtensions", "log_exports"]
}
