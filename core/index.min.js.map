{
  "version": 3,
  "sources": ["log.js", "live.js", "index.js"],
  "sourcesContent": ["import { config } from './index.js'\n\nexport function error(...data) {\n  if (config.core?.debug === 'silent') return\n  console.group(`[Error] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.error(v))\n  console.groupEnd();\n  return {\n    toError: () => new Error(data.toString())\n  }\n}\n\nexport function warn(...data) {\n  if (!config.core?.debug) return\n  console.group(`[Warn] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.warn(v))\n  console.groupEnd();\n  return {\n    toError: () => new Error(data.toString())\n  }\n}\n\nexport function log(...data) {\n  if (!config.core?.debug) return\n  console.group(`[Log] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.log(v))\n  console.groupEnd();\n  return {\n    toError: () => new Error(data.toString())\n  }\n}\n\nexport function info(...data) {\n  if (!config.core?.debug || config.core.debug !== 'verbose') return\n  console.group(`[Info] Ease: ${data[0]}`)\n  data.slice(1).forEach((v) => console.info(v))\n  console.groupEnd();\n  return {\n    toError: () => new Error(data.toString())\n  }\n}\n", "/**\n * Creates a reactive value that can be subscribed to.\n * @param {*} initialValue The initial value of the reactive value\n * @param {*} handler An optional handler to be called when the value changes\n * @returns The reactive value\n */\nexport function live(initialValue = null, handler = null) {  \n  let _value = initialValue\n  let handlers = []\n\n  if (handler) {\n    handlers.push(handler)\n  }\n\n  return {\n    get value() {\n      return _value\n    },\n    set value(value) {\n      let original = _value\n      _value = value\n      handlers.forEach((handler) => {\n        handler({original, value: _value})\n      })\n    },\n    /**\n     * Subscribes to changes in the reactive value\n     * @param {*} handler A handler to be called when the value changes\n     * @returns A reference to self\n     */\n    subscribe: function (handler) {\n      handlers.push(handler)\n      return this\n    },\n    /**\n     * Unsubscribes from changes in the reactive value\n     * @param {*} handler The handler to be removed\n     * @returns A reference to self\n     */\n    unsubscribe: function (handler) {\n      handlers = handlers.filter((h) => h !== handler)\n      return this\n    },\n    /**\n     * Unsubscribes all handlers from the reactive value\n     * @returns A reference to self\n     */\n    unsubscribeAll: function () {\n      handlers = []\n      return this\n    }\n  }\n}", "/** Ease */\nimport * as _log from './log.js'\nimport { live } from './live.js';\nconst { error, log, info } = _log;\n\n/* Core Config */\nexport let config = {\n  core: {\n    debug: false, // Enables debug mode; prints errors to console\n  },\n  inject: { // Handles injected extensions\n    name: '$',\n    extensions: []\n  }\n}\n\n/* Parse meta tags for configs */\ndocument.querySelectorAll('meta')?.forEach((meta) => {\n  if (meta.name.startsWith('ease.')) {\n    let path = meta.name.replace('ease.', '').split('.')\n    let key = path.pop()    \n\n    let target = path.reduce((acc,key) => {\n      if (acc[key] === undefined) acc[key] = {}\n      return acc[key]\n    }, config)\n\n    target[key] = meta.content\n  }\n})\n\n/**\n * Adds an extension, which adds functionality to Ease components.\n * \n * Extensions should be objects containing:\n * - name: The name of the extension\n * - methods: An object containing methods to be added to Ease\n * - objects: An object containing properties to be added to Ease\n * \n * These are considered \"artifacts\" of an extension.\n * \n * While Ease Core itself does not use extensions, they can be used to add functionality\n * to modules that use Ease. Typically, extensions should request the modules they need\n * by those containing artifacts of their own name.\n * \n * @param {*} object The object to be injected\n */\nexport function addExtension(object) {\n  let name = object.name || object.constructor.name\n  config.inject.extensions.push(object)\n  info(`Extension '${name}' has been added to Ease`)\n}\n\nexport function getExtension(name) {\n  return config.inject.extensions.find((extension) => extension.name === name)\n}\n\nexport function hasExtension(name) {\n  if (typeof name === 'string') return !!getExtension(name)\n  if (Array.isArray(name)) return name.every((n) => !!getExtension(n))\n  return false\n}\n\nexport function requireExtensions(names) {\n  if (typeof names === 'string') names = [names]\n  names.forEach((name) => {\n    if (!hasExtension(name)) throw new Error(`Extension '${name}' is required but not loaded`)\n  })\n  return true\n}\n\nexport function beforeExtensions(names) {\n  if (typeof names === 'string') names = [names]\n  names.forEach((name) => {\n    if (getExtension(name)) {\n      error(`Extension '${name}' is already loaded - this extension should be loaded before it`)\n    }\n  })\n}\n\n/**\n * Returns all extensions that contain a specific element\n * @param {*} element The element to search for\n * @returns A list of extensions with the given element\n */\nexport function getExtensionsByArtifact(element) {\n  return config.inject.extensions.filter((extension) => !!extension[element])\n          .map((extension) => [extension[element], extension.name])\n}\n\n/* Print to the console if debug mode is enabled */\nif (config.core.debug) info('Ease Loaded in Debug Mode');\n\n/* Export Ease */\nglobalThis.ease = { config, log: _log, extensions: {\n  add: addExtension,\n  get: getExtension,\n  has: hasExtension,\n  require: requireExtensions,\n  before: beforeExtensions,\n  getExtensionsByArtifact,\n  all: config.inject.extensions,\n}, live};"],
  "mappings": "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",
  "names": ["log_exports", "__export", "error", "info", "log", "warn", "error", "data", "config", "v", "warn", "log", "info", "live", "initialValue", "handler", "_value", "handlers", "value", "original", "h", "error", "log", "info", "log_exports", "config", "meta", "path", "key", "target", "acc", "addExtension", "object", "name", "getExtension", "extension", "hasExtension", "n", "requireExtensions", "names", "beforeExtensions", "getExtensionsByArtifact", "element", "live"]
}
